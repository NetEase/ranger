<?xml version="1.0" encoding="UTF-8"?>
<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor
	license agreements. See the NOTICE file distributed with this work for additional 
	information regarding copyright ownership. The ASF licenses this file to 
	You under the Apache License, Version 2.0 (the "License"); you may not use 
	this file except in compliance with the License. You may obtain a copy of 
	the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required 
	by applicable law or agreed to in writing, software distributed under the 
	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
	OF ANY KIND, either express or implied. See the License for the specific 
	language governing permissions and limitations under the License. -->
<entity-mappings version="1.0"
	xmlns="http://java.sun.com/xml/ns/persistence/orm" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/persistence/orm http://java.sun.com/xml/ns/persistence/orm_1_0.xsd ">

	<named-query name="XXAuthSession.getUserLoggedIn">
		<query>SELECT count(obj),function('DATE',obj.authTime) as dateAuth 
			   FROM XXAuthSession obj 
			   GROUP BY dateAuth
		</query>
	</named-query>
	<named-query name="XXAuthSession.getAuthSessionBySessionId">
		<query>SELECT obj FROM XXAuthSession obj 
			   WHERE obj.extSessionId = :sessionId
		</query>
	</named-query>

	<!-- XXPortalUser -->
	<named-query name="XXPortalUser.findByEmailAddress">
		<query>SELECT obj FROM XXPortalUser obj WHERE obj.emailAddress =
			:emailAddress</query>
	</named-query>
	<named-query name="XXPortalUser.findByLoginId">
		<query>SELECT obj FROM XXPortalUser obj WHERE obj.loginId = :loginId</query>
	</named-query>
	<named-query name="XXPortalUser.findByPublicScreenName">
		<query>SELECT obj FROM XXPortalUser obj WHERE obj.publicScreenName =
			:publicScreenName</query>
	</named-query>

	<named-query name="XXPortalUser.findByRole">
		<query>SELECT obj FROM XXPortalUser obj, XXPortalUserRole role WHERE obj.id = role.userId
			and role.userRole = :userRole</query>
	</named-query>

	<named-query name="XXPortalUser.getUserAddedReport">
		<query>SELECT count(obj), function('DATE',obj.createTime) as createDate FROM XXPortalUser obj GROUP BY createDate
		</query>
	</named-query>

	<!-- XXPortalUserRole -->
	<named-query name="XXPortalUserRole.findByRoleUserId">
		<query>SELECT obj FROM XXPortalUserRole obj WHERE obj.userId = :userId
			and obj.userRole = :userRole</query>
	</named-query>
	<named-query name="XXPortalUserRole.findByUserId">
		<query>SELECT obj FROM XXPortalUserRole obj WHERE obj.userId = :userId
		</query>
	</named-query>
	<named-query name="XXPortalUserRole.findByParentId">
		<query>SELECT obj FROM XXPortalUserRole obj WHERE obj.userId = :parentId
		</query>
	</named-query>


	<!-- XXAsset -->
	<named-query name="XXAsset.findByAssetName">
		<query>SELECT obj FROM XXAsset obj WHERE obj.name = :name AND obj.activeStatus != :status
		</query>
	</named-query>

	<!-- XXAuditMap -->
	<named-query name="XXAuditMap.findByResourceId">
		<query>SELECT obj FROM XXAuditMap obj WHERE obj.resourceId = :resourceId
		</query>
	</named-query>

	<!-- XXGroup -->
	<named-query name="XXGroup.findByUserId">
		<query>SELECT obj FROM XXGroup obj, XXGroupUser groupUser 
			WHERE obj.id = groupUser.parentGroupId and groupUser.userId = :userId
		</query>
	</named-query>

	<!-- XXPermMap -->
	<named-query name="XXPermMap.findByResourceId">
		<query>SELECT obj FROM XXPermMap obj WHERE obj.resourceId = :resourceId
		</query>
	</named-query>

	<!-- XXResource -->
	<named-query name="XXResource.findUpdatedResourcesByAssetId">
		<query>SELECT obj FROM XXResource obj WHERE obj.assetId = :assetId
		 AND obj.updateTime &gt; :lastUpdated 
		</query>
	</named-query>

	<named-query name="XXResource.findUpdatedResourcesByAssetName">
		<query>SELECT obj FROM XXResource obj, XXAsset xAsset 
			   WHERE obj.assetId = xAsset.id
			   AND xAsset.name = :assetName
		 	   AND obj.updateTime &gt; :lastUpdated 
		</query>
	</named-query>

	<named-query name="XXResource.findByAssetId">
		<query>SELECT obj FROM XXResource obj WHERE obj.assetId = :assetId
		</query>
	</named-query>

	<named-query name="XXResource.findByAssetType">
		<query>SELECT obj FROM XXResource obj, XXAsset xxAsset 
				WHERE xxAsset.id = obj.assetId 
				and xxAsset.assetType = :assetType	
		</query>
	</named-query>

	<named-query name="XXResource.findByResourceName">
		<query>SELECT obj FROM XXResource obj WHERE obj.name = :name
		</query>
	</named-query>

	<named-query name="XXResource.findByResourceNameAndAssetIdAndRecursiveFlag">
		<query>SELECT obj FROM XXResource obj WHERE obj.name like :name and obj.assetId=:assetId
		and obj.isRecursive=:isRecursive
		</query>
	</named-query>

	<named-query name="XXResource.findByResourceNameAndAssetIdAndResourceType">
		<query>SELECT obj FROM XXResource obj WHERE obj.name like :name and obj.assetId=:assetId
		and obj.resourceType=:resourceType
		</query>
	</named-query>


	<named-query name="XXResource.getMaxUpdateTimeForAssetName">
		<query>SELECT MAX(obj.updateTime) FROM XXResource obj, XXAsset xAsset 
			   WHERE obj.assetId = xAsset.id
			   AND xAsset.name = :assetName
		</query>
	</named-query>


	<named-query name="XXResource.findByAssetIdAndResourceStatus">
		<query>SELECT obj FROM XXResource obj WHERE obj.assetId = :assetId and
		 obj.resourceStatus = :resourceStatus
		</query>
	</named-query>

	<named-query name="XXUser.findByUserName">
		<query>SELECT Obj FROM XXUser obj
			   WHERE obj.name=:name
		</query>
	</named-query>
	
	<named-query name="XXUser.findByUserId">
		<query>SELECT Obj FROM XXUser obj
			   WHERE obj.id=:id
		</query>
	</named-query>

	<named-query name="XXGroup.findByGroupName">
		<query>SELECT Obj FROM XXGroup obj
			   WHERE obj.name=:name
		</query>
	</named-query>

	<named-query name="XXGroupUser.deleteByGroupIdAndUserId">
		<query>DELETE FROM  XXGroupUser  obj
			   WHERE obj.parentGroupId=:parentGroupId 	
			   AND obj.userId=:userId		   
		</query>
	</named-query>
	
	<named-query name="XXGroupUser.deleteByUserId">
		<query>DELETE FROM  XXGroupUser  obj
			   WHERE obj.userId=:userId		   
		</query>
	</named-query>
	
	<named-query name="XXGroupUser.deleteByGroupName">
		<query>DELETE FROM  XXGroupUser  obj
			   WHERE obj.name=:name		   
		</query>
	</named-query>
	
	<named-query name="XXGroupUser.updateGroupNameByParentGroupId">
		<query>UPDATE  XXGroupUser  obj
			   SET obj.name=:name
			   WHERE obj.parentGroupId=:parentGroupId		   
		</query>
	</named-query>

	<named-query name="XXGroupUser.findByUserId">
		<query>SELECT obj FROM XXGroupUser obj
			   WHERE obj.userId=:userId		   
		</query>
	</named-query>

	<named-query name="XXGroupUser.findGroupIdListByUserId">
		<query>SELECT obj.parentGroupId FROM XXGroupUser obj WHERE obj.userId=:xUserId		   
		</query>
	</named-query>

	<named-query name="XXGroupUser.findGroupNamesByUserName">
		<query>SELECT obj.name FROM XXGroup obj
		        WHERE obj.id IN (SELECT gu.parentGroupId FROM XXGroupUser gu, XXUser u
								  WHERE gu.userId = u.id AND u.name=:userName)
		</query>
	</named-query>

	<named-query name="XXGroupUser.findUserNamesByGroupId">
		<query>SELECT obj.name FROM XXUser obj WHERE obj.id IN
			  (SELECT gu.userId FROM XXGroupUser gu WHERE gu.parentGroupId=:groupId)
		</query>
	</named-query>

	<named-query name="XXGroupUser.findByGroupId">
		<query>SELECT obj FROM XXGroupUser obj WHERE obj.parentGroupId=:groupId
		</query>
	</named-query>
	
	<named-query name="XXGroupUser.getXGroupUsersByGroupName">
		<query>SELECT obj FROM XXGroupUser obj
			   WHERE obj.name=:name		   
		</query>
	</named-query>
	
	<named-query name="XXGroupUser.deleteByGroupNameAndUserIds">
		<query>DELETE FROM  XXGroupUser  obj
			   WHERE obj.name=:name	AND obj.userId IN :userIds	   
		</query>
	</named-query>

	<named-query name="XXTrxLog.findByTrxId">
		<query>SELECT obj FROM XXTrxLog obj WHERE obj.transactionId = :transactionId
		</query>
	</named-query>

	<named-query name="XXUser.findByPolicyItemId">
		<query>select obj.name from XXUser obj, XXPolicyItemUserPerm polItemUser 
		where polItemUser.policyItemId = :polItemId and polItemUser.userId = obj.id </query>
	</named-query>

	<named-query name="XXUser.findByPortalUserId">
		<query>select obj from XXUser obj, XXPortalUser portalUser where portalUser.id = :portalUserId and 
		obj.name = portalUser.loginId</query>
	</named-query>

	<named-query name="XXGroup.findByPolicyItemId">
		<query>select obj.name from XXGroup obj, XXPolicyItemGroupPerm polItemGrp 
		where polItemGrp.policyItemId = :polItemId and polItemGrp.groupId = obj.id </query>
	</named-query>


	<!-- XXPolicyItem -->
	<named-query name="XXPolicyItem.findByPolicyId">
		<query>select obj from XXPolicyItem obj
                where obj.policyId = :policyId
                order by obj.id
        </query>
	</named-query>

	<named-query name="XXPolicyItem.findByServiceId">
		<query>select obj from XXPolicyItem obj
                where obj.policyId in (select policy.id from XXPolicy policy where policy.service = :serviceId)
                order by obj.policyId, obj.id
        </query>
	</named-query>

	<!-- XXPolicy -->
	<named-query name="XXPolicy.findByNameAndServiceId">
		<query>select obj from XXPolicy obj where obj.name = :polName and obj.service = :serviceId order by obj.id</query>
	</named-query>

	<named-query name="XXPolicy.findByServiceId">
		<query>select obj from XXPolicy obj where obj.service = :serviceId order by obj.id</query>
	</named-query>

	<named-query name="XXPolicy.getMaxIdOfXXPolicy">
		<query>select MAX(obj.id) from XXPolicy obj</query>
	</named-query>
	
	<named-query name="XXPolicy.findByResourceSignatureByPolicyStatus">
		<query>select obj from XXPolicy obj, XXService xSvc where obj.service = xSvc.id 
				and obj.resourceSignature = :resSignature and xSvc.name = :serviceName and obj.isEnabled = :isPolicyEnabled</query>
	</named-query>
	
	<!--  currently not exposed but should be when we have a use case for it -->
	<named-query name="XXPolicy.findByResourceSignature">
		<query>select obj from XXPolicy obj, XXService xSvc where obj.service = xSvc.id 
				and obj.resourceSignature = :resSignature and xSvc.name = :serviceName</query>
	</named-query>
	
	<named-query name="XXPolicy.findByServiceDefId">
		<query>select obj from XXPolicy obj, XXService svc where 
		obj.service = svc.id and svc.type = :serviceDefId</query>
	</named-query>

	<!-- XXServiceDef -->
	<named-query name="XXServiceDef.findByName">
		<query>select obj from XXServiceDef obj where obj.name = :name</query>
	</named-query>

	<named-query name="XXServiceDef.getMaxIdOfXXServiceDef">
		<query>select MAX(obj.id) from XXServiceDef obj</query>
	</named-query>

	<!-- XXResourceDef -->
	<named-query name="XXResourceDef.findByNameAndDefId">
		<query>select obj from XXResourceDef obj where obj.name = :name and obj.defId = :defId order by obj.level</query>
	</named-query>

	<named-query name="XXResourceDef.findByServiceDefId">
		<query>select obj from XXResourceDef obj where obj.defId = :serviceDefId order by obj.level</query>
	</named-query>

	<named-query name="XXResourceDef.findByPolicyId">
		<query>select obj from XXResourceDef obj, XXPolicy xPol, XXServiceDef xSvcDef, 
				XXService xSvc where obj.defId = xSvcDef.id and xSvcDef.id = xSvc.type
				and xSvc.id = xPol.service and xPol.id = :policyId order by obj.level</query>
	</named-query>

	<named-query name="XXResourceDef.findByNameAndPolicyId">
		<query>select obj from XXResourceDef obj, XXPolicy xPol, XXServiceDef xSvcDef, 
				XXService xSvc where obj.defId = xSvcDef.id and xSvcDef.id = xSvc.type
				and xSvc.id = xPol.service and xPol.id = :policyId and obj.name = :name order by obj.level</query>
	</named-query>

	<named-query name="XXResourceDef.findByParentResId">
		<query>
			select obj from XXResourceDef obj where obj.parent = :parentId
		</query>
	</named-query>

	<!-- XXAccessTypeDefGrants -->
	<named-query name="XXAccessTypeDefGrants.findImpliedGrantsByATDId">
		<query>select obj.impliedGrant from XXAccessTypeDefGrants obj where obj.atdId = :atdId</query>
	</named-query>

	<named-query name="XXAccessTypeDefGrants.findByNameAndATDId">
		<query>select obj from XXAccessTypeDefGrants obj where obj.impliedGrant = :name and obj.atdId = :atdId</query>
	</named-query>
	
	<named-query name="XXAccessTypeDefGrants.findByATDId">
		<query>select obj from XXAccessTypeDefGrants obj where obj.atdId = :atdId</query>
	</named-query>

	<!-- XXEnumElementDef -->
	<named-query name="XXEnumElementDef.findByEnumDefId">
		<query>select obj from XXEnumElementDef obj where obj.enumDefId = :enumDefId order by obj.order</query>
	</named-query>

	<!-- XXServiceConfigDef -->
	<named-query name="XXServiceConfigDef.findByServiceDefId">
		<query>select obj from XXServiceConfigDef obj where obj.defId = :serviceDefId order by obj.order</query>
	</named-query>

	<named-query name="XXServiceConfigDef.findByServiceDefName">
		<query>select obj from XXServiceConfigDef obj, XXServiceDef svcDef 
				where obj.defId = svcDef.id and svcDef.name = :serviceDef order by obj.order</query>
	</named-query>


	<!-- XXAccessTypeDef -->
	<named-query name="XXAccessTypeDef.findByServiceDefId">
		<query>select obj from XXAccessTypeDef obj where obj.defId = :serviceDefId order by obj.order</query>
	</named-query>

	<named-query name="XXAccessTypeDef.findByNameAndServiceId">
		<query>select obj from XXAccessTypeDef obj, XXService xSvc where 
				obj.name = :name and xSvc.id = :serviceId and obj.defId = xSvc.type</query>
	</named-query>

	<!-- XXPolicyConditionDef -->
	<named-query name="XXPolicyConditionDef.findByServiceDefId">
		<query>select obj from XXPolicyConditionDef obj where obj.defId = :serviceDefId order by obj.order</query>
	</named-query>

	<named-query name="XXPolicyConditionDef.findByServiceDefIdAndName">
		<query>select obj from XXPolicyConditionDef obj where obj.defId = :serviceDefId and obj.name = :name order by obj.order</query>
	</named-query>

	<named-query name="XXPolicyConditionDef.findByPolicyItemId">
		<query>select obj from XXPolicyConditionDef obj, XXPolicyItemCondition xPolItemCond 
		where xPolItemCond.policyItemId = :polItemId and obj.id = xPolItemCond.type order by obj.order</query>
	</named-query>

	<named-query name="XXPolicyConditionDef.findByPolicyItemIdAndName">
		<query>select obj from XXPolicyConditionDef obj, XXPolicyItemCondition xPolItemCond 
				where xPolItemCond.policyItemId = :polItemId and obj.name = :name 
				and obj.id = xPolItemCond.type order by obj.order 
		</query>
	</named-query>

	<!-- XXContextEnricherDef -->
	<named-query name="XXContextEnricherDef.findByServiceDefId">
		<query>select obj from XXContextEnricherDef obj where obj.defId = :serviceDefId order by obj.order</query>
	</named-query>

	<named-query name="XXContextEnricherDef.findByServiceDefIdAndName">
		<query>select obj from XXContextEnricherDef obj where obj.defId = :serviceDefId and obj.name = :name order by obj.order</query>
	</named-query>


	<!-- XXEnumDef -->
	<named-query name="XXEnumDef.findByServiceDefId">
		<query>select obj from XXEnumDef obj where obj.defId = :serviceDefId</query>
	</named-query>


	<!-- XXServiceConfigMap -->
	<named-query name="XXServiceConfigMap.findByServiceId">
		<query>select obj from XXServiceConfigMap obj where obj.serviceId = :serviceId</query>
	</named-query>

	<named-query name="XXServiceConfigMap.findByServiceAndConfigKey">
		<query>select obj from XXServiceConfigMap obj where 
			obj.serviceId = :serviceId and obj.configKey = :configKey</query>
	</named-query>

	<!-- XXService -->
	<named-query name="XXService.findByName">
		<query>select obj from XXService obj where obj.name = :name</query>
	</named-query>

	<named-query name="XXService.getMaxIdOfXXService">
		<query>select MAX(obj.id) from XXService obj</query>
	</named-query>
	
	<named-query name="XXService.findByServiceDefId">
		<query>select obj from XXService obj where obj.type = :serviceDefId</query>
	</named-query>

	<!-- XXPolicyResource -->
	<named-query name="XXPolicyResource.findByResDefIdAndPolicyId">
		<query>select obj from XXPolicyResource obj where 
				obj.policyId = :polId and obj.resDefId = :resDefId</query>
	</named-query>

	<named-query name="XXPolicyResource.findByPolicyId">
		<query>select obj from XXPolicyResource obj
                where obj.policyId = :policyId
                order by obj.id
        </query>
	</named-query>

	<named-query name="XXPolicyResource.findByServiceId">
		<query>select obj from XXPolicyResource obj
                where obj.policyId in (select policy.id from XXPolicy policy where policy.service = :serviceId)
                order by obj.policyId, obj.id
        </query>
	</named-query>

	<named-query name="XXPolicyResource.findByResDefId">
		<query>select obj from XXPolicyResource obj where obj.resDefId = :resDefId</query>
	</named-query>
	
	<!-- XXPolicyResourceMap -->
	<named-query name="XXPolicyResourceMap.findByPolicyResId">
		<query>select obj from XXPolicyResourceMap obj where obj.resourceId = :polResId order by obj.order</query>
	</named-query>

	<named-query name="XXPolicyResourceMap.findByPolicyId">
		<query>select obj from XXPolicyResourceMap obj, XXPolicyResource res
                where obj.resourceId = res.id
                  and res.policyId = :policyId
                order by obj.resourceId, obj.order
        </query>
	</named-query>

	<named-query name="XXPolicyResourceMap.findByServiceId">
		<query>select obj from XXPolicyResourceMap obj, XXPolicyResource res
                where obj.resourceId = res.id
                  and res.policyId in (select policy.id from XXPolicy policy where policy.service = :serviceId)
                order by res.policyId, obj.resourceId, obj.order
        </query>
	</named-query>

	<!-- XXPolicyItemAccess -->
	<named-query name="XXPolicyItemAccess.findByPolicyItemId">
		<query>select obj from XXPolicyItemAccess obj where obj.policyItemId = :polItemId order by obj.order</query>
	</named-query>
	
	<named-query name="XXPolicyItemAccess.findByType">
		<query>select obj from XXPolicyItemAccess obj where obj.type = :type</query>
	</named-query>

	<named-query name="XXPolicyItemAccess.findByPolicyId">
		<query>select obj from XXPolicyItemAccess obj, XXPolicyItem item
		        where obj.policyItemId = item.id
		          and item.policyId = :policyId
		        order by obj.policyItemId, obj.order
		</query>
	</named-query>

	<named-query name="XXPolicyItemAccess.findByServiceId">
		<query>select obj from XXPolicyItemAccess obj, XXPolicyItem item
		        where obj.policyItemId = item.id
		          and item.policyId in (select policy.id from XXPolicy policy where policy.service = :serviceId)
		        order by item.policyId, obj.policyItemId, obj.order
		</query>
	</named-query>
	
	<!-- XXPolicyItemCondition -->
	<named-query name="XXPolicyItemCondition.findByPolicyItemId">
		<query>select obj from XXPolicyItemCondition obj where obj.policyItemId = :polItemId order by obj.order</query>
	</named-query>

	<named-query name="XXPolicyItemCondition.findByPolicyItemAndDefId">
		<query>select obj from XXPolicyItemCondition obj where 
				obj.policyItemId = :polItemId and obj.type = :polCondDefId order by obj.order</query>
	</named-query>

	<named-query name="XXPolicyItemCondition.findByPolicyConditionDefId">
		<query>select obj from XXPolicyItemCondition obj where obj.type = :polCondDefId</query>
	</named-query>

	<named-query name="XXPolicyItemCondition.findByPolicyId">
		<query>select obj from XXPolicyItemCondition obj, XXPolicyItem item
		        where obj.policyItemId = item.id
		          and item.policyId = :policyId
		        order by obj.policyItemId, obj.type, obj.order
		</query>
	</named-query>

	<named-query name="XXPolicyItemCondition.findByServiceId">
		<query>select obj from XXPolicyItemCondition obj, XXPolicyItem item
		        where obj.policyItemId = item.id
		          and item.policyId in (select policy.id from XXPolicy policy where policy.service = :serviceId)
		        order by item.policyId, obj.policyItemId, obj.type, obj.order
		</query>
	</named-query>
	
	<!-- XXPolicyItemGroupPerm -->
	<named-query name="XXPolicyItemGroupPerm.findByPolicyItemId">
		<query>select obj from XXPolicyItemGroupPerm obj where obj.policyItemId = :polItemId order by obj.order</query>
	</named-query>

	<named-query name="XXPolicyItemGroupPerm.findByPolicyId">
		<query>select obj from XXPolicyItemGroupPerm obj, XXPolicyItem item
		        where obj.policyItemId = item.id
		          and item.policyId = :policyId
		        order by obj.policyItemId, obj.order
		</query>
	</named-query>

	<named-query name="XXPolicyItemGroupPerm.findByServiceId">
		<query>select obj from XXPolicyItemGroupPerm obj, XXPolicyItem item
		        where obj.policyItemId = item.id
		          and item.policyId in (select policy.id from XXPolicy policy where policy.service = :serviceId)
		        order by item.policyId, obj.policyItemId, obj.order
		</query>
	</named-query>

	<!-- XXPolicyItemUserPerm -->
	<named-query name="XXPolicyItemUserPerm.findByPolicyItemId">
		<query>select obj from XXPolicyItemUserPerm obj where obj.policyItemId = :polItemId order by obj.order</query>
	</named-query>

	<named-query name="XXPolicyItemUserPerm.findByPolicyId">
		<query>select obj from XXPolicyItemUserPerm obj, XXPolicyItem item
		        where obj.policyItemId = item.id
		          and item.policyId = :policyId
		        order by obj.policyItemId, obj.order
		</query>
	</named-query>

	<named-query name="XXPolicyItemUserPerm.findByServiceId">
		<query>select obj from XXPolicyItemUserPerm obj, XXPolicyItem item
		        where obj.policyItemId = item.id
		          and item.policyId in (select policy.id from XXPolicy policy where policy.service = :serviceId)
		        order by item.policyId, obj.policyItemId, obj.order
		</query>
	</named-query>

	<!-- XXDataHist -->
	<named-query name="XXDataHist.findLatestByObjectClassTypeAndObjectId">
		<query>select obj from XXDataHist obj where obj.objectId = :objectId 
                               and obj.objectClassType = :classType ORDER BY obj.id</query>
	</named-query>

	<named-query name="XXDataHist.getVersionListOfObject">
		<query>select obj.version from XXDataHist obj where obj.objectId = :objId
			and obj.objectClassType = :classType GROUP BY obj.version </query>
	</named-query>

	<named-query name="XXDataHist.findObjectByVersionNumber">
		<query>select obj from XXDataHist obj where obj.objectClassType = :classType and 
		obj.objectId = :objId and obj.version = :version</query>
	</named-query>

	<!-- XXTrxLog -->
	<named-query name="XXTrxLog.findLogForMaxIdOfClassType">
		<query>select MAX(obj.objectId) from XXTrxLog obj where obj.objectClassType = :classType</query>
	</named-query>

	<!-- XXUserPermission -->
	<named-query name="XXUserPermission.findByUserPermissionId">
		<query>SELECT obj FROM XXUserPermission obj
			   WHERE obj.userId=:userId
		 </query>
	</named-query>
	
	<named-query name="XXUserPermission.findByUserPermissionIdAndIsAllowed">
		<query>SELECT obj FROM XXUserPermission obj
			   WHERE obj.userId=:userId	AND Obj.isAllowed=:isAllowed
		 </query>
	</named-query>

	<named-query name="XXUserPermission.findByModuleId">
		<query>SELECT obj FROM XXUserPermission obj
			   WHERE obj.moduleId=:moduleId	 AND Obj.isAllowed=:isAllowed
		 </query>
	</named-query>
	
	<named-query name="XXUserPermissionUpdates.findByModuleId">
		<query>SELECT obj FROM XXUserPermission obj
			   WHERE obj.moduleId=:moduleId
		 </query>
	</named-query>

	<!-- XXUserPermission -->
	<named-query name="XXGroupPermission.findByGroupId">
		<query>SELECT obj FROM XXGroupPermission obj
			   WHERE obj.groupId=:groupId
		 </query>
	</named-query>

	<named-query name="XXGroupPermission.findByModuleId">
		<query>SELECT obj FROM XXGroupPermission obj
			   WHERE obj.moduleId=:moduleId	AND Obj.isAllowed=:isAllowed
		 </query>
	</named-query>
	
	<named-query name="XXGroupPermissionUpdates.findByModuleId">
		<query>SELECT obj FROM XXGroupPermission obj
			   WHERE obj.moduleId=:moduleId	AND Obj.isAllowed=:isAllowed
		 </query>
	</named-query>
	
	<named-query name="XXGroupPermissionUpdate.findByModuleId">
		<query>SELECT obj FROM XXGroupPermission obj
			   WHERE obj.moduleId=:moduleId
		 </query>
	</named-query>

	<named-query name="XXUserPermission.findByModuleIdAndPortalUserId">
		<query>SELECT XXUserPermObj
				FROM XXUserPermission XXUserPermObj
				WHERE XXUserPermObj.moduleId = :moduleId AND XXUserPermObj.userId =:userId
		</query>
	</named-query>

	<named-query name="XXGroupPermission.findByModuleIdAndGroupId">
		<query>SELECT obj FROM XXGroupPermission obj WHERE obj.moduleId = :moduleId AND obj.groupId =:groupId
		</query>
	</named-query>
	
	<named-query name="XXPortalUser.findByUserName">
		<query>SELECT Obj FROM XXPortalUser obj
			   WHERE obj.loginId=:loginId
		</query>
	</named-query>

	<named-query name="XXPortalUser.findByXUserId">
		<query>SELECT xxPortalUser FROM XXPortalUser xxPortalUser,XXUser xxUser
			   WHERE xxUser.id=:id and xxPortalUser.loginId=xxUser.name
		</query>
	</named-query>

	<named-query name="XXPortalUser.findAllXPortalUser">
		<query>SELECT xxPortalUser FROM XXPortalUser xxPortalUser
		</query>
	</named-query>
	
	<!-- VXModuleDef -->
	<named-query name="XXModuleDef.findByModuleId">
		<query>SELECT obj FROM XXModuleDef obj
			   WHERE obj.id=:id
		 </query>
	</named-query>

	<named-query name="XXModuleDef.findByModuleName">
		<query>SELECT Obj FROM XXModuleDef obj
			   WHERE obj.module=:moduleName
		</query>
	</named-query>

	<named-query name="XXModuleDef.findAllAccessibleModulesByUserId">
		<query>SELECT obj.module FROM XXModuleDef obj 
		WHERE obj.id in (SELECT userPerm.moduleId FROM XXUserPermission userPerm WHERE userPerm.userId=:portalUserId and userPerm.isAllowed=:isAllowed)
		OR obj.id in (SELECT grpPerm.moduleId FROM XXGroupPermission grpPerm WHERE 
			grpPerm.groupId IN (SELECT grpUser.parentGroupId FROM XXGroupUser grpUser WHERE grpUser.userId=:xUserId) and grpPerm.isAllowed=:isAllowed)
		</query>
	</named-query>

	<named-query name="XXModuleDef.findAccessibleModulesByGroupId">
		<query>select obj.module from XXModuleDef obj, XXGroupPermission grpPerm where 
		grpPerm.groupId IN :grpIdList and grpPerm.moduleId = obj.id and grpPerm.isAllowed = :isAllowed
		</query>
	</named-query>

	<named-query name="XXGroupPermission.findByVXPoratUserId">
		<query>SELECT distinct   gmp FROM  XXGroupUser xgu,XXUser xu,XXGroupPermission gmp, XXPortalUser xpu
			   WHERE xu.name=xpu.loginId  and xu.id=xgu.userId and xgu.parentGroupId=gmp.groupId  and 
			   xpu.id=:userId and gmp.isAllowed=:isAllowed
		</query>
	</named-query>

	<named-query name="XXTrxLog.getMaxIdOfXXTrxLog">
		<query>select max(obj.id) from XXTrxLog obj</query>
	</named-query>
	<named-query name="XXTrxLog.updateLogAttr">
        <query>UPDATE XXTrxLog obj SET obj.newValue = :newValue
                WHERE obj.id &gt; :idFrom
                  AND obj.id &lt; :idTo
                  AND obj.objectClassType = :objClassType
                  AND obj.attributeName = :attrName
        </query>
    </named-query>
	<named-query name="XXAuthSession.getAuthSessionByUserId">
	        <query>SELECT obj FROM XXAuthSession obj WHERE obj.userId = :userId
	        </query>
	</named-query>
	<named-query name="XXGroupGroup.findByGroupId">
	        <query>SELECT obj FROM XXGroupGroup obj WHERE obj.groupId = :groupId or obj.parentGroupId = :parentGroupId
	        </query>
	</named-query>
	<named-query name="XXPolicy.findByUserId">
	        <query>select obj from XXPolicy obj, XXPolicyItem polItem,XXPolicyItemUserPerm polItemUserPerm where
	         obj.id = polItem.policyId and polItem.id = polItemUserPerm.policyItemId and polItemUserPerm.userId = :userId</query>
	</named-query>
	<named-query name="XXPolicy.findByGroupId">
	        <query>select obj from XXPolicy obj, XXPolicyItem polItem,XXPolicyItemGroupPerm polItemGroupPerm where
	         obj.id = polItem.policyId and polItem.id = polItemGroupPerm.policyItemId and polItemGroupPerm.groupId = :groupId</query>
	</named-query>
	<named-query name="XXDataHist.findLatestByObjectClassTypeAndObjectIdAndEventTime">
		<query>select obj from XXDataHist obj where obj.objectId = :objectId and 
		obj.objectClassType = :classType and 
		obj.createTime &lt;= :createTime ORDER BY obj.id DESC</query>
	</named-query>
	<named-query name="XXPortalUserRole.findXPortalUserRolebyXPortalUserId">
        <query>select obj.userRole from XXPortalUserRole obj where obj.userId = :userId</query>
	</named-query>
</entity-mappings>
